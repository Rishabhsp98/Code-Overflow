#include <iostream>
#include <vector>
#include <limits.h>
using namespace std;
int matrix_MIN_Cost(vector<int> d, int n)
{
    int cost[n][n];

    // for all the Diagonal elements
    for (int i = 1; i < n; i++)
        cost[i][i] = 0;

    for (int L = 2; L < n; L++)
    {
        for (int i = 1; i < n - L + 1; i++)
        {
            int j = i + L - 1;
            cost[i][j] = INT_MAX;
            for (int k = i; k <= j - 1; k++)
            {
                int q = cost[i][k] + cost[k + 1][j] + d[i - 1] * d[k] * d[j];
                if (q < cost[i][j])
                    cost[i][j] = q;
            }
        }
    }
    return cost[1][n - 1];
}
int main()
{
    int n;
    cin >> n;
    vector<int> V(n);
    for (int i = 0; i < n; i++)
    {
        cin >> V[i];
    }
    cout << "Now minimum cost or operation on chain multiplication is =>  " << matrix_MIN_Cost(V, n);
    return 0;
}
